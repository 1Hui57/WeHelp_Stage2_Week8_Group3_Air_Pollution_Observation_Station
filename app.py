from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from pydantic import BaseModel
import httpx
import requests

app = FastAPI()

WEBHOOK_URL = "https://discord.com/api/webhooks/1366080384927793243/X9l12ZV5rpuJfiTKhdzT4JDw9VlMkkluotj70-FmQh2xIG7QPmew8U1LtuOikecg00MY"
API_URL = "https://data.moenv.gov.tw/api/v2/aqx_p_432"
API_KEY = "9e565f9a-84dd-4e79-9097-d403cae1ea75"

class SiteSelection(BaseModel):
    county: str
    sitename: str

async def send_discord_message(data: dict):
    aqi = data.get("aqi", "N/A")
    aqi_val = int(aqi) if aqi.isdigit() else None

    if aqi_val is None:
        remark = "ÁÑ°Ë≥áÊñô"
        color = 0x808080  # ÁÅ∞Ëâ≤
    elif aqi_val <= 50:
        remark = "üëç Á©∫Ê∞£ÂìÅË≥™ËâØÂ•ΩÔºåÈÅ©ÂêàÊà∂Â§ñÊ¥ªÂãï!"
        color = 0x008000  # Á∂†Ëâ≤
    elif aqi_val <= 100:
        remark = "üëå ÊôÆÈÄöÔºåÈï∑ÊôÇÈñìÊà∂Â§ñË¶ÅÊ≥®ÊÑèÈ´îÊÑü„ÄÇ"
        color = 0xFFFF00  # ÈªÉËâ≤
    elif aqi_val <= 150:
        remark = "‚ö†Ô∏è Â∞çÊïèÊÑüÊóèÁæ§‰∏ç‰Ω≥ÔºåË´ãÊ∏õÂ∞ëÊà∂Â§ñÊ¥ªÂãï„ÄÇ"
        color = 0xFFA500  # Ê©òËâ≤
    elif aqi_val <= 200:
        remark = "‚ö†Ô∏è Â∞çÊâÄÊúâÊóèÁæ§‰∏çÂÅ•Â∫∑ÔºåÂª∫Ë≠∞Ê∏õÂ∞ëÂ§ñÂá∫„ÄÇ"
        color = 0xFF0000  # Á¥ÖËâ≤
    elif aqi_val <= 300:
        remark = "üö® ÈùûÂ∏∏‰∏çÂÅ•Â∫∑ÔºåÂª∫Ë≠∞ÈÅøÂÖçÂ§ñÂá∫„ÄÇ"
        color = 0x800080  # Á¥´Ëâ≤
    elif aqi_val <= 400:
        remark = "‚ò†Ô∏è Âç±ÂÆ≥ÂÅ•Â∫∑ÔºåÊáâÁïôÂú®ÂÆ§ÂÖß‰∏¶Êé°ÂèñÈò≤Ë≠∑Êé™ÊñΩ„ÄÇ"
        color = 0xA52A2A  # Ê£ïËâ≤
    else:
        remark = "‚ùå Á©∫Ê∞£ÂìÅË≥™Ê•µÂ∑ÆÔºåË´ãÂö¥Ê†ºÈÅøÂÖçÂ§ñÂá∫‰∏¶Êà¥Âè£ÁΩ©„ÄÇ"
        color = 0xA52A2A  # Ê£ïËâ≤



    city = f"{data['county']} / {data['sitename']}"

    embed = {
        "title": "üåÜ Á©∫Ê∞£ÂìÅË≥™Âø´Â†±",
        "description": f"{city} Áï∂ÂâçÁ©∫Ê∞£ÂìÅË≥™Êï∏ÊìöÂ¶Ç‰∏ãÔºåË´ãÂèÉËÄÉÂÅ•Â∫∑Âª∫Ë≠∞‰∏¶ÈÅ©Áï∂Ë™øÊï¥Êà∂Â§ñÊ¥ªÂãï„ÄÇ",
        "url": "https://www.youtube.com/watch?v=MwOC8p-O2cA",  # ÂèØÊèõÊàêÂØ¶ÈöõÊï∏Êìö‰æÜÊ∫ê
        "color": color,
        "timestamp": data.get("publishtime_iso", None),  

        "thumbnail": {
            "url": ""  
        },

        "fields": [
            {"name": " ", "value": " ", "inline": False},
            {"name": " ", "value": " ", "inline": False},
            {"name": "Âú∞ÂçÄ", "value": city, "inline": True},
            {"name": "Á©∫Ê∞£ÂìÅË≥™ÊåáÊ®ô", "value": data.get("aqi", "N/A"), "inline": True},
            {"name": "ÁãÄÊÖã", "value": data.get("status", "N/A"), "inline": True},
            {"name": " ", "value": " ", "inline": False},
            {"name": "PM2.5", "value": data.get("pm2.5", "N/A"), "inline": True},
            {"name": "PM10", "value": data.get("pm10", "N/A"), "inline": True},
            {"name": "O‚ÇÉ", "value": data.get("o3", "N/A"), "inline": True},
            {"name": " ", "value": " ", "inline": False},
            {"name": "CO", "value": data.get("co", "N/A"), "inline": True},
            {"name": "SO‚ÇÇ", "value": data.get("so2", "N/A"), "inline": True},
            {"name": "NO‚ÇÇ", "value": data.get("no2", "N/A"), "inline": True},
            {"name": " ", "value": " ", "inline": False},
            {"name": "È¢®ÈÄü (m/s)", "value": data.get("wind_speed", "N/A"), "inline": True},
            {"name": "È¢®Âêë (¬∞)", "value": data.get("wind_direc", "N/A"), "inline": True},
            {"name": " ", "value": " ", "inline": False},
            {"name": "Êõ¥Êñ∞ÊôÇÈñì", "value": data.get("publishtime", "N/A"), "inline": False},
            {"name": "üìù Âª∫Ë≠∞Ê¥ªÂãï", "value": remark, "inline": False},
        ],



        "footer": {
            "text": "Êú¨Ë£Ω‰ΩúÁî±ÂΩ≠Â§ßÂ∏•ÂúòÈöäÂòîÂøÉÁÄùË°ÄÂçîÂä©ÈñãÁôº‰∏≠",
            "icon_url": ""  # ÂèØÊèõÊàêÂúòÈöä logo
        },
    }



    payload = {
        "username": "Á©∫Ê∞£Â∞èÂπ´Êâã üå§Ô∏è",
        "content": None,
        "embeds": [embed]
    }



    print(f"ÁôºÈÄÅÂà∞ Discord ÁöÑË≥áÊñôÔºö{payload}")
    response = requests.post(WEBHOOK_URL, json=payload, timeout=10.0)
    response.raise_for_status()

@app.post("/send_message")
async def send_message(data: SiteSelection):
    try:
        async with httpx.AsyncClient(verify=False) as client:
            response = await client.get(
                API_URL,
                params={
                    "api_key": API_KEY,
                    "format": "JSON",
                    "limit": 1000,
                    "sort": "ImportDate desc"
                }
            )
            response.raise_for_status()
            all_data = response.json()

        match = next((item for item in all_data["records"]
                    if item["county"] == data.county and item["sitename"] == data.sitename), None)

        if not match:
            raise HTTPException(status_code=404, detail="Êâæ‰∏çÂà∞Ë©≤Ê∏¨Á´ôË≥áÊñô")

        await send_discord_message(match)

        return JSONResponse({"message": f"ÊàêÂäüÁôºÈÄÅÔºö{data.county}/{data.sitename} AQI {match.get('aqi', 'N/A')}"})


    except Exception as e:
        raise HTTPException(status_code=500, detail=f"ÈåØË™§: {e}")

@app.get("/stations")
async def get_stations():
    try:
        async with httpx.AsyncClient(verify=False) as client:
            response = await client.get(
                API_URL,
                params={
                    "api_key": API_KEY,
                    "format": "JSON",
                    "limit": 1000,
                    "sort": "ImportDate desc"
                }
            )
            response.raise_for_status()
            all_data = response.json()

        if "records" not in all_data:
            raise HTTPException(status_code=500, detail="API ÂõûÊáâ‰∏çÂåÖÂê´ records")

        stations = [{"county": item["county"], "sitename": item["sitename"]}
                    for item in all_data["records"]]

        return JSONResponse({"records": stations})
    except Exception as e:
        print(f"ÈåØË™§: {e}")
        raise HTTPException(status_code=500, detail=f"ÈåØË™§: {e}")

@app.get("/", response_class=HTMLResponse)
async def root():
    with open("test-index.html", encoding="utf-8") as f:
        return f.read()
